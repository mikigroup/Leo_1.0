create table
  public.variant_ingredients (
    variant_id uuid not null,
    ingredient_id integer not null,
    updated_at timestamp with time zone null default current_timestamp,
    created_at timestamp with time zone null default current_timestamp,
    constraint variant_ingredients_pkey primary key (variant_id, ingredient_id),
    constraint variant_ingredients_ingredient_id_fkey foreign key (ingredient_id) references ingredients (id),
    constraint variant_ingredients_variant_id_fkey foreign key (variant_id) references menu_variants (id)
  ) tablespace pg_default;

create trigger update_variant_ingredients_modtime before
update on variant_ingredients for each row
execute function update_modified_column ();

create table
  public.variant_allergens (
    variant_id uuid not null,
    allergen_id integer not null,
    updated_at timestamp with time zone null default current_timestamp,
    created_at timestamp with time zone null default current_timestamp,
    constraint variant_allergens_pkey primary key (variant_id, allergen_id),
    constraint variant_allergens_allergen_id_fkey foreign key (allergen_id) references allergens (id),
    constraint variant_allergens_variant_id_fkey foreign key (variant_id) references menu_variants (id)
  ) tablespace pg_default;

create trigger update_variant_allergens_modtime before
update on variant_allergens for each row
execute function update_modified_column ();

create table
  public.texts (
    id bigint generated by default as identity not null,
    created_at timestamp with time zone not null default now(),
    updated_at timestamp without time zone null,
    text text null,
    title text null,
    page text null,
    position text null,
    constraint texts_pkey primary key (id),
    constraint texts_id_key unique (id),
    constraint texts_position_key unique ("position")
  ) tablespace pg_default;

create table
  public.profiles (
    id uuid not null,
    updated_at timestamp with time zone null,
    avatar_url text null,
    first_name text null,
    last_name text null,
    telephone character varying null,
    street text null,
    street_number text null,
    city text null,
    ico text null,
    dic text null,
    company text null,
    website text null,
    username text null,
    email text null,
    table_settings_orders jsonb null,
    table_settings_menus jsonb null,
    created_at timestamp with time zone null default now(),
    table_settings_customers jsonb null,
    user_role text null,
    zip_code text null,
    constraint profiles_pkey primary key (id),
    constraint profiles_id_fkey foreign key (id) references auth.users (id)
  ) tablespace pg_default;

create trigger update_profiles_modtime before
update on profiles for each row
execute function update_modified_column ();

create table
  public.orders (
    created_at timestamp with time zone null,
    updated_at timestamp with time zone null,
    state text null,
    date date null,
    id uuid not null default gen_random_uuid (),
    customer_first_name text null,
    customer_last_name text null,
    customer_street text null,
    customer_street_number text null,
    customer_city text null,
    customer_zip_code text null,
    customer_telephone text null,
    customer_email text null,
    delivery_street text null,
    delivery_street_number text null,
    delivery_zip_code text null,
    delivery_first_name text null,
    delivery_last_name text null,
    delivery_telephone text null,
    pay_state boolean null,
    delivery_city text null,
    currency text null,
    order_number bigserial not null,
    user_id uuid null,
    shipping_method text null,
    pay_method text null,
    note text null,
    total_pieces bigint null,
    total_price bigint null,
    constraint orders_pkey primary key (id),
    constraint orders_user_id_fkey foreign key (user_id) references auth.users (id)
  ) tablespace pg_default;

create trigger update_orders_modtime before
update on orders for each row
execute function update_modified_column ();

create table
  public.order_items (
    id uuid not null default gen_random_uuid (),
    order_id uuid null,
    price numeric(10, 2) null,
    quantity smallint null,
    variant_id uuid null,
    updated_at timestamp with time zone null default current_timestamp,
    created_at timestamp with time zone null default current_timestamp,
    constraint order_items_pkey primary key (id),
    constraint order_items_order_id_fkey foreign key (order_id) references orders (id),
    constraint order_items_variant_id_fkey foreign key (variant_id) references menu_variants (id)
  ) tablespace pg_default;

create trigger update_order_items_modtime before
update on order_items for each row
execute function update_modified_column ();

create table
  public.menus (
    id uuid not null default gen_random_uuid (),
    date date null,
    created_at timestamp with time zone null default current_timestamp,
    updated_at timestamp with time zone null default current_timestamp,
    soup text null,
    active boolean null,
    notes text null,
    type text null,
    nutri text null,
    constraint menus_pkey primary key (id)
  ) tablespace pg_default;

create trigger update_menus_modtime before
update on menus for each row
execute function update_modified_column ();

create table
  public.menu_versions (
    id uuid not null default gen_random_uuid (),
    menu_id uuid not null,
    date date null,
    soup text null,
    active boolean null,
    notes text null,
    type text null,
    nutri text null,
    created_at timestamp with time zone null default current_timestamp,
    valid_from timestamp with time zone null,
    valid_to timestamp with time zone null,
    constraint menu_versions_pkey primary key (id),
    constraint menu_versions_menu_id_fkey foreign key (menu_id) references menus (id)
  ) tablespace pg_default;

create trigger update_menu_versions_modtime before
update on menu_versions for each row
execute function update_modified_column ();

create table
  public.menu_variants (
    id uuid not null default gen_random_uuid (),
    menu_id uuid not null,
    variant_number text not null,
    description text not null,
    price numeric null,
    updated_at timestamp with time zone null default current_timestamp,
    created_at timestamp with time zone null default current_timestamp,
    menu_version_id uuid null,
    constraint variants_pkey primary key (id),
    constraint menu_variants_menu_id_fkey foreign key (menu_id) references menus (id),
    constraint menu_variants_menu_version_id_fkey foreign key (menu_version_id) references menu_versions (id)
  ) tablespace pg_default;

create trigger update_menu_variants_modtime before
update on menu_variants for each row
execute function update_modified_column ();

create table
  public.menu_ingredients (
    menu_id uuid not null,
    ingredient_id integer not null,
    updated_at timestamp with time zone null default current_timestamp,
    created_at timestamp with time zone null default current_timestamp,
    constraint menu_ingredients_pkey primary key (menu_id, ingredient_id),
    constraint menu_ingredients_ingredient_id_fkey foreign key (ingredient_id) references ingredients (id),
    constraint menu_ingredients_menu_id_fkey foreign key (menu_id) references menus (id)
  ) tablespace pg_default;

create trigger update_menu_ingredients_modtime before
update on menu_ingredients for each row
execute function update_modified_column ();

create table
  public.menu_allergens (
    menu_id uuid not null,
    allergen_id integer not null,
    updated_at timestamp with time zone null default current_timestamp,
    created_at timestamp with time zone null default current_timestamp,
    constraint menu_allergens_pkey primary key (menu_id, allergen_id),
    constraint menu_allergens_allergen_id_fkey foreign key (allergen_id) references allergens (id),
    constraint menu_allergens_menu_id_fkey foreign key (menu_id) references menus (id)
  ) tablespace pg_default;

create trigger update_menu_allergens_modtime before
update on menu_allergens for each row
execute function update_modified_column ();

create table
  public.ingredients (
    id serial not null,
    name text not null,
    updated_at timestamp with time zone null default current_timestamp,
    created_at timestamp with time zone null default current_timestamp,
    constraint ingredients_pkey primary key (id),
    constraint ingredients_name_key unique (name)
  ) tablespace pg_default;

create trigger update_ingredients_modtime before
update on ingredients for each row
execute function update_modified_column ();

create table
  public.customers (
    id uuid not null,
    updated_at timestamp with time zone null,
    first_name text null,
    last_name text null,
    telephone text null,
    street text null,
    street_number text null,
    city text null,
    ico text null,
    dic text null,
    company text null,
    website text null,
    username text null,
    email text null,
    created_at timestamp with time zone not null default now(),
    zip_code text null,
    user_role text null,
    constraint customers_pkey primary key (id),
    constraint customers_id_fkey foreign key (id) references auth.users (id)
  ) tablespace pg_default;

create trigger update_customers_modtime before
update on customers for each row
execute function update_modified_column ();


Zde jsou funkce:

create_menu_version
declare
  v_menu_version_id uuid;
begin
  insert into menu_versions (menu_id, date, soup, active, notes, type, nutri, valid_from)
  values (p_menu_id, p_date, p_soup, p_active, p_notes, p_type, p_nutri, current_timestamp)
  returning id into v_menu_version_id;

  update menu_versions
  set valid_to = current_timestamp
  where menu_id = p_menu_id and valid_to is null and id <> v_menu_version_id;

  return v_menu_version_id;
end;
-----
get_current_menu_version

declare
  v_menu_version_id uuid;
begin
  select id into v_menu_version_id
  from menu_versions
  where menu_id = p_menu_id and valid_from <= current_timestamp and (valid_to > current_timestamp or valid_to is null)
  order by valid_from desc
  limit 1;

  return v_menu_version_id;
end;
----
get_menu_version_at_date

declare
  v_menu_version_id uuid;
begin
  select id into v_menu_version_id
  from menu_versions
  where menu_id = p_menu_id and valid_from <= p_date and (valid_to > p_date or valid_to is null)
  order by valid_from desc
  limit 1;

  return v_menu_version_id;
end;
----

Příkazy policies:

CREATE POLICY "Enable all operations for authenticated users"
ON "public"."menus"
FOR ALL
TO authenticated
USING (true);

-- Politika pro čtení pro všechny uživatele
CREATE POLICY "Enable read access for all users on menus"
ON "public"."menus"
FOR SELECT
TO public
USING (true);




